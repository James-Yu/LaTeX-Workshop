{
  "includes": [],
  "cmds": {
    "mathlig{}{}": {
      "command": "mathlig{}{}",
      "snippet": "mathlig{${1:characters}}{${2:ligature commands%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "mathligson": {
      "command": "mathligson",
      "snippet": "mathligson",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "mathligsoff": {
      "command": "mathligsoff",
      "snippet": "mathligsoff",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "mathligprotect{}": {
      "command": "mathligprotect{}",
      "snippet": "mathligprotect{${1:macro%cmd}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "inference{}{}": {
      "command": "inference{}{}",
      "snippet": "inference{${1:line1 \\\\ ... \\\\ lineN%formula}}{${2:conclusion%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "inference[]{}{}": {
      "command": "inference[]{}{}",
      "snippet": "inference[${3:name}]{${1:line1 \\\\ ... \\\\ lineN%formula}}{${2:conclusion%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "inference*{}{}": {
      "command": "inference*{}{}",
      "snippet": "inference*{${1:line1 \\\\ ... \\\\ lineN%formula}}{${2:conclusion%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "inference*[]{}{}": {
      "command": "inference*[]{}{}",
      "snippet": "inference*[${3:name}]{${1:line1 \\\\ ... \\\\ lineN%formula}}{${2:conclusion%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "setpremisesend{}": {
      "command": "setpremisesend{}",
      "snippet": "setpremisesend{${1:length}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "setpremisesspace{}": {
      "command": "setpremisesspace{}",
      "snippet": "setpremisesspace{${1:length}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "setnamespace{}": {
      "command": "setnamespace{}",
      "snippet": "setnamespace{${1:length}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "predicate{}": {
      "command": "predicate{}",
      "snippet": "predicate{${1:formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "predicatebegin": {
      "command": "predicatebegin",
      "snippet": "predicatebegin",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "predicateend": {
      "command": "predicateend",
      "snippet": "predicateend",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "compiler{}": {
      "command": "compiler{}",
      "snippet": "compiler{${1:%<source%>,${2:machine},%<target%>}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "interpreter{}": {
      "command": "interpreter{}",
      "snippet": "interpreter{${1:%<source%>,%<language%>}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "program{}": {
      "command": "program{}",
      "snippet": "program{${1:%<program%>,%<language%>}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "machine{}": {
      "command": "machine{}",
      "snippet": "machine{${1:%<machine%>}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "reservestyle{}{}": {
      "command": "reservestyle{}{}",
      "snippet": "reservestyle{${1:macro%cmd}}{${2:formatting%definition}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "reservestyle[]{}{}": {
      "command": "reservestyle[]{}{}",
      "snippet": "reservestyle[${3:spacing cmd}]{${1:macro%cmd}}{${2:formatting%definition}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "<": {
      "command": "<",
      "snippet": "<",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1,
      "detail": "<",
      "documentation": "LESS-THAN SIGN r:"
    },
    "comp{}{}": {
      "command": "comp{}{}",
      "snippet": "comp{${1:command%plain}}{${2:environment%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "eval{}{}": {
      "command": "eval{}{}",
      "snippet": "eval{${1:command%plain}}{${2:environment%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "evalsymbol": {
      "command": "evalsymbol",
      "snippet": "evalsymbol",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "evalsymbol[]": {
      "command": "evalsymbol[]",
      "snippet": "evalsymbol[${1:superscript%formula}]",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "compsymbol": {
      "command": "compsymbol",
      "snippet": "compsymbol",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "compsymbol[]": {
      "command": "compsymbol[]",
      "snippet": "compsymbol[${1:superscript%formula}]",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "exe{}{}": {
      "command": "exe{}{}",
      "snippet": "exe{${1:program}}{${2:data%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "exe{}[]{}": {
      "command": "exe{}[]{}",
      "snippet": "exe{${1:program}}[${2:machine%formula}]{${3:data%formula}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "TestForConflict{}": {
      "command": "TestForConflict{}",
      "snippet": "TestForConflict{${1:command list}}",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "semanticDate": {
      "command": "semanticDate",
      "snippet": "semanticDate",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    },
    "semanticVersion": {
      "command": "semanticVersion",
      "snippet": "semanticVersion",
      "option": "",
      "keyvals": [],
      "keyvalindex": -1
    }
  },
  "envs": {},
  "options": [
    "ligature",
    "inference",
    "tdiagram",
    "reserved",
    "shorthand"
  ]
}