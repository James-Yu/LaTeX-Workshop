{
  "Bqty{}": {
    "command": "Bqty{expression}",
    "package": "physics",
    "snippet": "Bqty{${1:expression}}"
  },
  "Im{}": {
    "command": "Im{expression}",
    "package": "physics",
    "snippet": "Im{${1:expression}}"
  },
  "PV{}": {
    "command": "PV{expression}",
    "package": "physics",
    "snippet": "PV{${1:expression}}"
  },
  "Pmqty{}": {
    "command": "Pmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "Pmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "Pr(expression)": {
    "command": "Pr(expression)",
    "package": "physics",
    "snippet": "Pr(expression)"
  },
  "Probability": {
    "command": "Probability",
    "package": "physics",
    "snippet": "Probability"
  },
  "Res[]": {
    "command": "Res[expression]",
    "package": "physics",
    "snippet": "Res[${1:expression}]"
  },
  "Re{}": {
    "command": "Re{expression}",
    "package": "physics",
    "snippet": "Re{${1:expression}}"
  },
  "Tr": {
    "command": "Tr",
    "package": "physics",
    "snippet": "Tr"
  },
  "Trace": {
    "command": "Trace",
    "package": "physics",
    "snippet": "Trace"
  },
  "abs*{}": {
    "command": "abs*{expression}",
    "package": "physics",
    "snippet": "abs*{${1:expression}}"
  },
  "absolutevalue{}": {
    "command": "absolutevalue{expression}",
    "package": "physics",
    "snippet": "absolutevalue{${1:expression}}"
  },
  "abs{}": {
    "command": "abs{expression}",
    "package": "physics",
    "snippet": "abs{${1:expression}}"
  },
  "acomm*{}{}": {
    "command": "acomm*{expression1}{expression2}",
    "package": "physics",
    "snippet": "acomm*{${1:expression1}}{${2:expression2}}"
  },
  "acomm{}{}": {
    "command": "acomm{expression1}{expression2}",
    "package": "physics",
    "snippet": "acomm{${1:expression1}}{${2:expression2}}"
  },
  "acos(expression)": {
    "command": "acos(expression)",
    "package": "physics",
    "snippet": "acos(expression)"
  },
  "acos[](expression)": {
    "command": "acos[power](expression)",
    "package": "physics",
    "snippet": "acos[${1:power}](expression)"
  },
  "acosecant": {
    "command": "acosecant",
    "package": "physics",
    "snippet": "acosecant"
  },
  "acosine": {
    "command": "acosine",
    "package": "physics",
    "snippet": "acosine"
  },
  "acot(expression)": {
    "command": "acot(expression)",
    "package": "physics",
    "snippet": "acot(expression)"
  },
  "acot[](expression)": {
    "command": "acot[power](expression)",
    "package": "physics",
    "snippet": "acot[${1:power}](expression)"
  },
  "acotangent": {
    "command": "acotangent",
    "package": "physics",
    "snippet": "acotangent"
  },
  "acsc(expression)": {
    "command": "acsc(expression)",
    "package": "physics",
    "snippet": "acsc(expression)"
  },
  "acsc[](expression)": {
    "command": "acsc[power](expression)",
    "package": "physics",
    "snippet": "acsc[${1:power}](expression)"
  },
  "anticommutator{}{}": {
    "command": "anticommutator{expression1}{expression2}",
    "package": "physics",
    "snippet": "anticommutator{${1:expression1}}{${2:expression2}}"
  },
  "arccos(expression)": {
    "command": "arccos(expression)",
    "package": "physics",
    "snippet": "arccos(expression)"
  },
  "arccos[](expression)": {
    "command": "arccos[power](expression)",
    "package": "physics",
    "snippet": "arccos[${1:power}](expression)"
  },
  "arccosecant": {
    "command": "arccosecant",
    "package": "physics",
    "snippet": "arccosecant"
  },
  "arccosine": {
    "command": "arccosine",
    "package": "physics",
    "snippet": "arccosine"
  },
  "arccot(expression)": {
    "command": "arccot(expression)",
    "package": "physics",
    "snippet": "arccot(expression)"
  },
  "arccot[](expression)": {
    "command": "arccot[power](expression)",
    "package": "physics",
    "snippet": "arccot[${1:power}](expression)"
  },
  "arccotangent": {
    "command": "arccotangent",
    "package": "physics",
    "snippet": "arccotangent"
  },
  "arccsc(expression)": {
    "command": "arccsc(expression)",
    "package": "physics",
    "snippet": "arccsc(expression)"
  },
  "arccsc[](expression)": {
    "command": "arccsc[power](expression)",
    "package": "physics",
    "snippet": "arccsc[${1:power}](expression)"
  },
  "arcsec(expression)": {
    "command": "arcsec(expression)",
    "package": "physics",
    "snippet": "arcsec(expression)"
  },
  "arcsec[](expression)": {
    "command": "arcsec[power](expression)",
    "package": "physics",
    "snippet": "arcsec[${1:power}](expression)"
  },
  "arcsecant": {
    "command": "arcsecant",
    "package": "physics",
    "snippet": "arcsecant"
  },
  "arcsin(expression)": {
    "command": "arcsin(expression)",
    "package": "physics",
    "snippet": "arcsin(expression)"
  },
  "arcsin[](expression)": {
    "command": "arcsin[power](expression)",
    "package": "physics",
    "snippet": "arcsin[${1:power}](expression)"
  },
  "arcsine": {
    "command": "arcsine",
    "package": "physics",
    "snippet": "arcsine"
  },
  "arctan(expression)": {
    "command": "arctan(expression)",
    "package": "physics",
    "snippet": "arctan(expression)"
  },
  "arctan[](expression)": {
    "command": "arctan[power](expression)",
    "package": "physics",
    "snippet": "arctan[${1:power}](expression)"
  },
  "arctangent": {
    "command": "arctangent",
    "package": "physics",
    "snippet": "arctangent"
  },
  "asec(expression)": {
    "command": "asec(expression)",
    "package": "physics",
    "snippet": "asec(expression)"
  },
  "asec[](expression)": {
    "command": "asec[power](expression)",
    "package": "physics",
    "snippet": "asec[${1:power}](expression)"
  },
  "asecant": {
    "command": "asecant",
    "package": "physics",
    "snippet": "asecant"
  },
  "asin(expression)": {
    "command": "asin(expression)",
    "package": "physics",
    "snippet": "asin(expression)"
  },
  "asin[](expression)": {
    "command": "asin[power](expression)",
    "package": "physics",
    "snippet": "asin[${1:power}](expression)"
  },
  "asine": {
    "command": "asine",
    "package": "physics",
    "snippet": "asine"
  },
  "atan(expression)": {
    "command": "atan(expression)",
    "package": "physics",
    "snippet": "atan(expression)"
  },
  "atan[](expression)": {
    "command": "atan[power](expression)",
    "package": "physics",
    "snippet": "atan[${1:power}](expression)"
  },
  "atangent": {
    "command": "atangent",
    "package": "physics",
    "snippet": "atangent"
  },
  "bmqty{}": {
    "command": "bmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "bmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "bqty{}": {
    "command": "bqty{expression}",
    "package": "physics",
    "snippet": "bqty{${1:expression}}"
  },
  "bra*{}\\ket*{}": {
    "command": "bra*{expression1}\\ket*{expression2}",
    "package": "physics",
    "snippet": "bra*{${1:expression1}}\\ket*{${2:expression2}}"
  },
  "bra*{}\\ket{}": {
    "command": "bra*{expression1}\\ket{expression2}",
    "package": "physics",
    "snippet": "bra*{${1:expression1}}\\ket{${2:expression2}}"
  },
  "bra*{}": {
    "command": "bra*{expression}",
    "package": "physics",
    "snippet": "bra*{${1:expression}}"
  },
  "braket*{}{}": {
    "command": "braket*{expression1}{expression2}",
    "package": "physics",
    "snippet": "braket*{${1:expression1}}{${2:expression2}}"
  },
  "braket{}": {
    "command": "braket{expression1}",
    "package": "physics",
    "snippet": "braket{${1:expression1}}"
  },
  "braket{}{}": {
    "command": "braket{expression1}{expression2}",
    "package": "physics",
    "snippet": "braket{${1:expression1}}{${2:expression2}}"
  },
  "bra{}\\ket*{}": {
    "command": "bra{expression1}\\ket*{expression2}",
    "package": "physics",
    "snippet": "bra{${1:expression1}}\\ket*{${2:expression2}}"
  },
  "bra{}\\ket{}": {
    "command": "bra{expression1}\\ket{expression2}",
    "package": "physics",
    "snippet": "bra{${1:expression1}}\\ket{${2:expression2}}"
  },
  "bra{}": {
    "command": "bra{expression}",
    "package": "physics",
    "snippet": "bra{${1:expression}}"
  },
  "comm*{}{}": {
    "command": "comm*{expression1}{expression2}",
    "package": "physics",
    "snippet": "comm*{${1:expression1}}{${2:expression2}}"
  },
  "commutator{}{}": {
    "command": "commutator{expression1}{expression2}",
    "package": "physics",
    "snippet": "commutator{${1:expression1}}{${2:expression2}}"
  },
  "comm{}{}": {
    "command": "comm{expression1}{expression2}",
    "package": "physics",
    "snippet": "comm{${1:expression1}}{${2:expression2}}"
  },
  "cos(expression)": {
    "command": "cos(expression)",
    "package": "physics",
    "snippet": "cos(expression)"
  },
  "cos[](expression)": {
    "command": "cos[power](expression)",
    "package": "physics",
    "snippet": "cos[${1:power}](expression)"
  },
  "cosecant": {
    "command": "cosecant",
    "package": "physics",
    "snippet": "cosecant"
  },
  "cosh(expression)": {
    "command": "cosh(expression)",
    "package": "physics",
    "snippet": "cosh(expression)"
  },
  "cosh[](expression)": {
    "command": "cosh[power](expression)",
    "package": "physics",
    "snippet": "cosh[${1:power}](expression)"
  },
  "cosine": {
    "command": "cosine",
    "package": "physics",
    "snippet": "cosine"
  },
  "cot(expression)": {
    "command": "cot(expression)",
    "package": "physics",
    "snippet": "cot(expression)"
  },
  "cot[](expression)": {
    "command": "cot[power](expression)",
    "package": "physics",
    "snippet": "cot[${1:power}](expression)"
  },
  "cotangent": {
    "command": "cotangent",
    "package": "physics",
    "snippet": "cotangent"
  },
  "coth(expression)": {
    "command": "coth(expression)",
    "package": "physics",
    "snippet": "coth(expression)"
  },
  "coth[](expression)": {
    "command": "coth[power](expression)",
    "package": "physics",
    "snippet": "coth[${1:power}](expression)"
  },
  "cp": {
    "command": "cp",
    "package": "physics",
    "snippet": "cp"
  },
  "cross": {
    "command": "cross",
    "package": "physics",
    "snippet": "cross"
  },
  "crossproduct": {
    "command": "crossproduct",
    "package": "physics",
    "snippet": "crossproduct"
  },
  "csc(expression)": {
    "command": "csc(expression)",
    "package": "physics",
    "snippet": "csc(expression)"
  },
  "csc[](expression)": {
    "command": "csc[power](expression)",
    "package": "physics",
    "snippet": "csc[${1:power}](expression)"
  },
  "csch(expression)": {
    "command": "csch(expression)",
    "package": "physics",
    "snippet": "csch(expression)"
  },
  "csch[](expression)": {
    "command": "csch[power](expression)",
    "package": "physics",
    "snippet": "csch[${1:power}](expression)"
  },
  "curl": {
    "command": "curl",
    "package": "physics",
    "snippet": "curl"
  },
  "curl(expression)": {
    "command": "curl(expression)",
    "package": "physics",
    "snippet": "curl(expression)"
  },
  "curl*(expression)": {
    "command": "curl*(expression)",
    "package": "physics",
    "snippet": "curl*(expression)"
  },
  "curl*[]": {
    "command": "curl*[expression]",
    "package": "physics",
    "snippet": "curl*[${1:expression}]"
  },
  "curl[]": {
    "command": "curl[expression]",
    "package": "physics",
    "snippet": "curl[${1:expression}]"
  },
  "curl{}": {
    "command": "curl{expression}",
    "package": "physics",
    "snippet": "curl{${1:expression}}"
  },
  "dd": {
    "command": "dd",
    "package": "physics",
    "snippet": "dd",
    "detail": "ⅆ",
    "documentation": "DOUBLE-STRUCK ITALIC SMALL D"
  },
  "dd(expression)": {
    "command": "dd(expression)",
    "package": "physics",
    "snippet": "dd(expression)"
  },
  "dd[]{}": {
    "command": "dd[power]{expression}",
    "package": "physics",
    "snippet": "dd[${2:power}]{${1:expression}}"
  },
  "dd{}": {
    "command": "dd{expression}",
    "package": "physics",
    "snippet": "dd{${1:expression}}"
  },
  "derivative{}{}": {
    "command": "derivative{function}{expression}",
    "package": "physics",
    "snippet": "derivative{${1:function}}{${2:expression}}"
  },
  "det(expression)": {
    "command": "det(expression)",
    "package": "physics",
    "snippet": "det(expression)"
  },
  "determinant": {
    "command": "determinant",
    "package": "physics",
    "snippet": "determinant"
  },
  "differential": {
    "command": "differential",
    "package": "physics",
    "snippet": "differential"
  },
  "div(expression)": {
    "command": "div(expression)",
    "package": "physics",
    "snippet": "div(expression)"
  },
  "div*(expression)": {
    "command": "div*(expression)",
    "package": "physics",
    "snippet": "div*(expression)"
  },
  "div*[]": {
    "command": "div*[expression]",
    "package": "physics",
    "snippet": "div*[${1:expression}]"
  },
  "div[]": {
    "command": "div[expression]",
    "package": "physics",
    "snippet": "div[${1:expression}]"
  },
  "divergence": {
    "command": "divergence",
    "package": "physics",
    "snippet": "divergence"
  },
  "divergence{}": {
    "command": "divergence{expression}",
    "package": "physics",
    "snippet": "divergence{${1:expression}}"
  },
  "divisionsymbol": {
    "command": "divisionsymbol",
    "package": "physics",
    "snippet": "divisionsymbol"
  },
  "div{}": {
    "command": "div{expression}",
    "package": "physics",
    "snippet": "div{${1:expression}}"
  },
  "dotproduct": {
    "command": "dotproduct",
    "package": "physics",
    "snippet": "dotproduct"
  },
  "dv*{}{}": {
    "command": "dv*{function}{expression}",
    "package": "physics",
    "snippet": "dv*{${1:function}}{${2:expression}}"
  },
  "dv[]{}{}": {
    "command": "dv[power]{function}{expression}",
    "package": "physics",
    "snippet": "dv[${3:power}]{${1:function}}{${2:expression}}"
  },
  "dv{}(expression2)": {
    "command": "dv{expression1}(expression2)",
    "package": "physics",
    "snippet": "dv{${1:expression1}}(expression2)"
  },
  "dv{}": {
    "command": "dv{expression}",
    "package": "physics",
    "snippet": "dv{${1:expression}}"
  },
  "dv{}{}": {
    "command": "dv{function}{expression}",
    "package": "physics",
    "snippet": "dv{${1:function}}{${2:expression}}"
  },
  "dyad*{}{}": {
    "command": "dyad*{expression1}{expression2}",
    "package": "physics",
    "snippet": "dyad*{${1:expression1}}{${2:expression2}}"
  },
  "dyad{}{}": {
    "command": "dyad{expression1}{expression2}",
    "package": "physics",
    "snippet": "dyad{${1:expression1}}{${2:expression2}}"
  },
  "dyad{}": {
    "command": "dyad{expression}",
    "package": "physics",
    "snippet": "dyad{${1:expression}}"
  },
  "erf(expression)": {
    "command": "erf(expression)",
    "package": "physics",
    "snippet": "erf(expression)"
  },
  "ev**{}{}": {
    "command": "ev**{expression1}{expression2}",
    "package": "physics",
    "snippet": "ev**{${1:expression1}}{${2:expression2}}"
  },
  "ev*{}{}": {
    "command": "ev*{expression1}{expression2}",
    "package": "physics",
    "snippet": "ev*{${1:expression1}}{${2:expression2}}"
  },
  "eval(expression|_{}^{}": {
    "command": "eval(expression|_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "eval(expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "eval*(expression|_{}^{}": {
    "command": "eval*(expression|_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "eval*(expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "eval*[expression|_{}^{}": {
    "command": "eval*[expression|_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "eval*[expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "eval*{}_{}^{}": {
    "command": "eval*{expression}_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "eval*{${1:expression}}_{${2:limit1}}^{${3:limit2}}"
  },
  "eval[expression|_{}^{}": {
    "command": "eval[expression|_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "eval[expression|_{${1:limit1}}^{${2:limit2}}"
  },
  "evaluated{}_{}^{}": {
    "command": "evaluated{expression}_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "evaluated{${1:expression}}_{${2:limit1}}^{${3:limit2}}"
  },
  "eval{}_{}^{}": {
    "command": "eval{expression}_{limit1}^{limit2}",
    "package": "physics",
    "snippet": "eval{${1:expression}}_{${2:limit1}}^{${3:limit2}}"
  },
  "ev{}{}": {
    "command": "ev{expression1}{expression2}",
    "package": "physics",
    "snippet": "ev{${1:expression1}}{${2:expression2}}"
  },
  "ev{}": {
    "command": "ev{expression}",
    "package": "physics",
    "snippet": "ev{${1:expression}}"
  },
  "exp(expression)": {
    "command": "exp(expression)",
    "package": "physics",
    "snippet": "exp(expression)"
  },
  "expectationvalue{}{}": {
    "command": "expectationvalue{expression1}{expression2}",
    "package": "physics",
    "snippet": "expectationvalue{${1:expression1}}{${2:expression2}}"
  },
  "exponential": {
    "command": "exponential",
    "package": "physics",
    "snippet": "exponential"
  },
  "expval*{}{}": {
    "command": "expval*{expression1}{expression2}",
    "package": "physics",
    "snippet": "expval*{${1:expression1}}{${2:expression2}}"
  },
  "expval{}{}": {
    "command": "expval{expression1}{expression2}",
    "package": "physics",
    "snippet": "expval{${1:expression1}}{${2:expression2}}"
  },
  "expval{}": {
    "command": "expval{expression}",
    "package": "physics",
    "snippet": "expval{${1:expression}}"
  },
  "fdv*{}{}": {
    "command": "fdv*{function}{expression}",
    "package": "physics",
    "snippet": "fdv*{${1:function}}{${2:expression}}"
  },
  "fdv{}": {
    "command": "fdv{expression}",
    "package": "physics",
    "snippet": "fdv{${1:expression}}"
  },
  "fdv{}(function)": {
    "command": "fdv{expression}(function)",
    "package": "physics",
    "snippet": "fdv{${1:expression}}(function)"
  },
  "fdv{}{}": {
    "command": "fdv{function}{expression}",
    "package": "physics",
    "snippet": "fdv{${1:function}}{${2:expression}}"
  },
  "flatfrac{}(expression2)": {
    "command": "flatfrac{expression1}(expression2)",
    "package": "physics",
    "snippet": "flatfrac{${1:expression1}}(expression2)"
  },
  "functionalderivative{}{}": {
    "command": "functionalderivative{function}{expression}",
    "package": "physics",
    "snippet": "functionalderivative{${1:function}}{${2:expression}}"
  },
  "grad": {
    "command": "grad",
    "package": "physics",
    "snippet": "grad"
  },
  "grad(expression)": {
    "command": "grad(expression)",
    "package": "physics",
    "snippet": "grad(expression)"
  },
  "grad*(expression)": {
    "command": "grad*(expression)",
    "package": "physics",
    "snippet": "grad*(expression)"
  },
  "grad*[]": {
    "command": "grad*[expression]",
    "package": "physics",
    "snippet": "grad*[${1:expression}]"
  },
  "grad[]": {
    "command": "grad[expression]",
    "package": "physics",
    "snippet": "grad[${1:expression}]"
  },
  "gradient": {
    "command": "gradient",
    "package": "physics",
    "snippet": "gradient"
  },
  "gradient{}": {
    "command": "gradient{expression}",
    "package": "physics",
    "snippet": "gradient{${1:expression}}"
  },
  "grad{}": {
    "command": "grad{expression}",
    "package": "physics",
    "snippet": "grad{${1:expression}}"
  },
  "hypcosecant": {
    "command": "hypcosecant",
    "package": "physics",
    "snippet": "hypcosecant"
  },
  "hypcosine": {
    "command": "hypcosine",
    "package": "physics",
    "snippet": "hypcosine"
  },
  "hypcotangent": {
    "command": "hypcotangent",
    "package": "physics",
    "snippet": "hypcotangent"
  },
  "hypsecant": {
    "command": "hypsecant",
    "package": "physics",
    "snippet": "hypsecant"
  },
  "hypsine": {
    "command": "hypsine",
    "package": "physics",
    "snippet": "hypsine"
  },
  "hyptangent": {
    "command": "hyptangent",
    "package": "physics",
    "snippet": "hyptangent"
  },
  "imaginary": {
    "command": "imaginary",
    "package": "physics",
    "snippet": "imaginary"
  },
  "innerproduct{}{}": {
    "command": "innerproduct{expression1}{expression2}",
    "package": "physics",
    "snippet": "innerproduct{${1:expression1}}{${2:expression2}}"
  },
  "ip*{}{}": {
    "command": "ip*{expression1}{expression2}",
    "package": "physics",
    "snippet": "ip*{${1:expression1}}{${2:expression2}}"
  },
  "ip{}{}": {
    "command": "ip{expression1}{expression2}",
    "package": "physics",
    "snippet": "ip{${1:expression1}}{${2:expression2}}"
  },
  "ket*{}": {
    "command": "ket*{expression}",
    "package": "physics",
    "snippet": "ket*{${1:expression}}"
  },
  "ketbra*{}{}": {
    "command": "ketbra*{expression1}{expression2}",
    "package": "physics",
    "snippet": "ketbra*{${1:expression1}}{${2:expression2}}"
  },
  "ketbra{}{}": {
    "command": "ketbra{expression1}{expression2}",
    "package": "physics",
    "snippet": "ketbra{${1:expression1}}{${2:expression2}}"
  },
  "ket{}": {
    "command": "ket{expression}",
    "package": "physics",
    "snippet": "ket{${1:expression}}"
  },
  "laplacian": {
    "command": "laplacian",
    "package": "physics",
    "snippet": "laplacian"
  },
  "laplacian(expression)": {
    "command": "laplacian(expression)",
    "package": "physics",
    "snippet": "laplacian(expression)"
  },
  "laplacian*(expression)": {
    "command": "laplacian*(expression)",
    "package": "physics",
    "snippet": "laplacian*(expression)"
  },
  "laplacian*[]": {
    "command": "laplacian*[expression]",
    "package": "physics",
    "snippet": "laplacian*[${1:expression}]"
  },
  "laplacian[]": {
    "command": "laplacian[expression]",
    "package": "physics",
    "snippet": "laplacian[${1:expression}]"
  },
  "laplacian{}": {
    "command": "laplacian{expression}",
    "package": "physics",
    "snippet": "laplacian{${1:expression}}"
  },
  "ln(expression)": {
    "command": "ln(expression)",
    "package": "physics",
    "snippet": "ln(expression)"
  },
  "log(expression)": {
    "command": "log(expression)",
    "package": "physics",
    "snippet": "log(expression)"
  },
  "logarithm": {
    "command": "logarithm",
    "package": "physics",
    "snippet": "logarithm"
  },
  "matrixdeterminant{}": {
    "command": "matrixdeterminant{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}",
    "package": "physics",
    "snippet": "matrixdeterminant{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}}"
  },
  "matrixel*{}{}{}": {
    "command": "matrixel*{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "matrixel*{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixelement*{}{}{}": {
    "command": "matrixelement*{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "matrixelement*{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixelement{}{}{}": {
    "command": "matrixelement{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "matrixelement{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixel{}{}{}": {
    "command": "matrixel{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "matrixel{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "matrixquantity(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)": {
    "command": "matrixquantity(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)",
    "package": "physics",
    "snippet": "matrixquantity(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)"
  },
  "matrixquantity{}": {
    "command": "matrixquantity{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "matrixquantity{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "mdet{}": {
    "command": "mdet{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}",
    "package": "physics",
    "snippet": "mdet{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}}"
  },
  "mel**{}{}{}": {
    "command": "mel**{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "mel**{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "mel*{}{}{}": {
    "command": "mel*{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "mel*{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "mel{}{}{}": {
    "command": "mel{expression1}{expression2}{expression3}",
    "package": "physics",
    "snippet": "mel{${1:expression1}}{${2:expression2}}{${3:expression3}}"
  },
  "mqty(\\admat{})": {
    "command": "mqty(\\admat{matrix element 1,matrix element 2,matrix element 3,...})",
    "package": "physics",
    "snippet": "mqty(\\admat{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\antidiagonalmatrix{})": {
    "command": "mqty(\\antidiagonalmatrix{matrix element 1,matrix element 2,matrix element 3,...})",
    "package": "physics",
    "snippet": "mqty(\\antidiagonalmatrix{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\diagonalmatrix{})": {
    "command": "mqty(\\diagonalmatrix{matrix element 1,matrix element 2,matrix element 3,...})",
    "package": "physics",
    "snippet": "mqty(\\diagonalmatrix{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\dmat[]{})": {
    "command": "mqty(\\dmat[matrix element]{matrix element 1,matrix element 2,matrix element 3,...})",
    "package": "physics",
    "snippet": "mqty(\\dmat[${2:matrix element}]{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\dmat{})": {
    "command": "mqty(\\dmat{matrix element 1,matrix element 2,matrix element 3,...})",
    "package": "physics",
    "snippet": "mqty(\\dmat{${1:matrix element 1,matrix element 2,matrix element 3,...}})"
  },
  "mqty(\\identitymatrix{})": {
    "command": "mqty(\\identitymatrix{number})",
    "package": "physics",
    "snippet": "mqty(\\identitymatrix{${1:number}})"
  },
  "mqty(\\imat{})": {
    "command": "mqty(\\imat{number})",
    "package": "physics",
    "snippet": "mqty(\\imat{${1:number}})"
  },
  "mqty(\\paulimatrix{})": {
    "command": "mqty(\\paulimatrix{n})",
    "package": "physics",
    "snippet": "mqty(\\paulimatrix{${1:n}})"
  },
  "mqty(\\pmat{})": {
    "command": "mqty(\\pmat{n})",
    "package": "physics",
    "snippet": "mqty(\\pmat{${1:n}})"
  },
  "mqty(\\xmat*{}{}{})": {
    "command": "mqty(\\xmat*{matrix element star for element indices }{n}{m})",
    "package": "physics",
    "snippet": "mqty(\\xmat*{${1:matrix element star for element indices }}{${2:n}}{${3:m}})"
  },
  "mqty(\\xmatrix{}{}{})": {
    "command": "mqty(\\xmatrix{matrix element}{n}{m})",
    "package": "physics",
    "snippet": "mqty(\\xmatrix{${1:matrix element}}{${2:n}}{${3:m}})"
  },
  "mqty(\\xmat{}{}{})": {
    "command": "mqty(\\xmat{matrix element}{n}{m})",
    "package": "physics",
    "snippet": "mqty(\\xmat{${1:matrix element}}{${2:n}}{${3:m}})"
  },
  "mqty(\\zeromatrix{}{})": {
    "command": "mqty(\\zeromatrix{n}{m})",
    "package": "physics",
    "snippet": "mqty(\\zeromatrix{${1:n}}{${2:m}})"
  },
  "mqty(\\zmat{}{})": {
    "command": "mqty(\\zmat{n}{m})",
    "package": "physics",
    "snippet": "mqty(\\zmat{${1:n}}{${2:m}})"
  },
  "mqty(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)": {
    "command": "mqty(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)",
    "package": "physics",
    "snippet": "mqty(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)"
  },
  "mqty*(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)": {
    "command": "mqty*(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)",
    "package": "physics",
    "snippet": "mqty*(matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4)"
  },
  "mqty[]": {
    "command": "mqty[matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4]",
    "package": "physics",
    "snippet": "mqty[${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}]"
  },
  "mqty{}": {
    "command": "mqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "mqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "mqty|matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4|": {
    "command": "mqty|matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4|",
    "package": "physics",
    "snippet": "mqty|matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4|"
  },
  "naturallogarithm": {
    "command": "naturallogarithm",
    "package": "physics",
    "snippet": "naturallogarithm"
  },
  "norm*{}": {
    "command": "norm*{expression}",
    "package": "physics",
    "snippet": "norm*{${1:expression}}"
  },
  "norm{}": {
    "command": "norm{expression}",
    "package": "physics",
    "snippet": "norm{${1:expression}}"
  },
  "op*{}{}": {
    "command": "op*{expression1}{expression2}",
    "package": "physics",
    "snippet": "op*{${1:expression1}}{${2:expression2}}"
  },
  "op{}{}": {
    "command": "op{expression1}{expression2}",
    "package": "physics",
    "snippet": "op{${1:expression1}}{${2:expression2}}"
  },
  "order*{}": {
    "command": "order*{expression}",
    "package": "physics",
    "snippet": "order*{${1:expression}}"
  },
  "order{}": {
    "command": "order{expression}",
    "package": "physics",
    "snippet": "order{${1:expression}}"
  },
  "outerproduct{}{}": {
    "command": "outerproduct{expression1}{expression2}",
    "package": "physics",
    "snippet": "outerproduct{${1:expression1}}{${2:expression2}}"
  },
  "partialderivative{}{}": {
    "command": "partialderivative{function}{expression}",
    "package": "physics",
    "snippet": "partialderivative{${1:function}}{${2:expression}}"
  },
  "pb*{}{}": {
    "command": "pb*{expression1}{expression2}",
    "package": "physics",
    "snippet": "pb*{${1:expression1}}{${2:expression2}}"
  },
  "pb{}{}": {
    "command": "pb{expression1}{expression2}",
    "package": "physics",
    "snippet": "pb{${1:expression1}}{${2:expression2}}"
  },
  "pderivative{}": {
    "command": "pderivative{expression}",
    "package": "physics",
    "snippet": "pderivative{${1:expression}}"
  },
  "pdv*{}{}": {
    "command": "pdv*{f}{x}",
    "package": "physics",
    "snippet": "pdv*{${1:f}}{${2:x}}"
  },
  "pdv[]{}{}": {
    "command": "pdv[power]{function}{expression}",
    "package": "physics",
    "snippet": "pdv[${3:power}]{${1:function}}{${2:expression}}"
  },
  "pdv{}": {
    "command": "pdv{expression}",
    "package": "physics",
    "snippet": "pdv{${1:expression}}"
  },
  "pdv{}{}": {
    "command": "pdv{function}{expression}",
    "package": "physics",
    "snippet": "pdv{${1:function}}{${2:expression}}"
  },
  "pdv{}{}{}": {
    "command": "pdv{f}{x}{y}",
    "package": "physics",
    "snippet": "pdv{${1:f}}{${2:x}}{${3:y}}"
  },
  "pmqty{}": {
    "command": "pmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "pmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "poissonbracket{}{}": {
    "command": "poissonbracket{expression1}{expression2}",
    "package": "physics",
    "snippet": "poissonbracket{${1:expression1}}{${2:expression2}}"
  },
  "pqty{}": {
    "command": "pqty{expression}",
    "package": "physics",
    "snippet": "pqty{${1:expression}}"
  },
  "pv{}": {
    "command": "pv{expression}",
    "package": "physics",
    "snippet": "pv{${1:expression}}"
  },
  "qall": {
    "command": "qall",
    "package": "physics",
    "snippet": "qall"
  },
  "qall*": {
    "command": "qall*",
    "package": "physics",
    "snippet": "qall*"
  },
  "qand": {
    "command": "qand",
    "package": "physics",
    "snippet": "qand"
  },
  "qand*": {
    "command": "qand*",
    "package": "physics",
    "snippet": "qand*"
  },
  "qas": {
    "command": "qas",
    "package": "physics",
    "snippet": "qas"
  },
  "qas*": {
    "command": "qas*",
    "package": "physics",
    "snippet": "qas*"
  },
  "qassume": {
    "command": "qassume",
    "package": "physics",
    "snippet": "qassume"
  },
  "qassume*": {
    "command": "qassume*",
    "package": "physics",
    "snippet": "qassume*"
  },
  "qcc": {
    "command": "qcc",
    "package": "physics",
    "snippet": "qcc"
  },
  "qcc*": {
    "command": "qcc*",
    "package": "physics",
    "snippet": "qcc*"
  },
  "qcomma{}": {
    "command": "qcomma{word or phrase}",
    "package": "physics",
    "snippet": "qcomma{${1:word or phrase}}"
  },
  "qc{}": {
    "command": "qc{word or phrase}",
    "package": "physics",
    "snippet": "qc{${1:word or phrase}}"
  },
  "qelse": {
    "command": "qelse",
    "package": "physics",
    "snippet": "qelse"
  },
  "qelse*": {
    "command": "qelse*",
    "package": "physics",
    "snippet": "qelse*"
  },
  "qeven": {
    "command": "qeven",
    "package": "physics",
    "snippet": "qeven"
  },
  "qeven*": {
    "command": "qeven*",
    "package": "physics",
    "snippet": "qeven*"
  },
  "qfor": {
    "command": "qfor",
    "package": "physics",
    "snippet": "qfor"
  },
  "qfor*": {
    "command": "qfor*",
    "package": "physics",
    "snippet": "qfor*"
  },
  "qgiven": {
    "command": "qgiven",
    "package": "physics",
    "snippet": "qgiven"
  },
  "qgiven*": {
    "command": "qgiven*",
    "package": "physics",
    "snippet": "qgiven*"
  },
  "qif": {
    "command": "qif",
    "package": "physics",
    "snippet": "qif"
  },
  "qif*": {
    "command": "qif*",
    "package": "physics",
    "snippet": "qif*"
  },
  "qin": {
    "command": "qin",
    "package": "physics",
    "snippet": "qin"
  },
  "qin*": {
    "command": "qin*",
    "package": "physics",
    "snippet": "qin*"
  },
  "qinteger": {
    "command": "qinteger",
    "package": "physics",
    "snippet": "qinteger"
  },
  "qinteger*": {
    "command": "qinteger*",
    "package": "physics",
    "snippet": "qinteger*"
  },
  "qlet": {
    "command": "qlet",
    "package": "physics",
    "snippet": "qlet"
  },
  "qlet*": {
    "command": "qlet*",
    "package": "physics",
    "snippet": "qlet*"
  },
  "qodd": {
    "command": "qodd",
    "package": "physics",
    "snippet": "qodd"
  },
  "qodd*": {
    "command": "qodd*",
    "package": "physics",
    "snippet": "qodd*"
  },
  "qor": {
    "command": "qor",
    "package": "physics",
    "snippet": "qor"
  },
  "qor*": {
    "command": "qor*",
    "package": "physics",
    "snippet": "qor*"
  },
  "qotherwise": {
    "command": "qotherwise",
    "package": "physics",
    "snippet": "qotherwise"
  },
  "qotherwise*": {
    "command": "qotherwise*",
    "package": "physics",
    "snippet": "qotherwise*"
  },
  "qq*{}": {
    "command": "qq*{word or phrase}",
    "package": "physics",
    "snippet": "qq*{${1:word or phrase}}"
  },
  "qq{}": {
    "command": "qq{word or phrase}",
    "package": "physics",
    "snippet": "qq{${1:word or phrase}}"
  },
  "qsince": {
    "command": "qsince",
    "package": "physics",
    "snippet": "qsince"
  },
  "qsince*": {
    "command": "qsince*",
    "package": "physics",
    "snippet": "qsince*"
  },
  "qthen": {
    "command": "qthen",
    "package": "physics",
    "snippet": "qthen"
  },
  "qthen*": {
    "command": "qthen*",
    "package": "physics",
    "snippet": "qthen*"
  },
  "qty(expression)": {
    "command": "qty(expression)",
    "package": "physics",
    "snippet": "qty(expression)"
  },
  "qty[]": {
    "command": "qty[expression]",
    "package": "physics",
    "snippet": "qty[${1:expression}]"
  },
  "qty{}": {
    "command": "qty{expression}",
    "package": "physics",
    "snippet": "qty{${1:expression}}"
  },
  "qty|expression|": {
    "command": "qty|expression|",
    "package": "physics",
    "snippet": "qty|expression|"
  },
  "quantity": {
    "command": "quantity",
    "package": "physics",
    "snippet": "quantity"
  },
  "qunless": {
    "command": "qunless",
    "package": "physics",
    "snippet": "qunless"
  },
  "qunless*": {
    "command": "qunless*",
    "package": "physics",
    "snippet": "qunless*"
  },
  "qusing": {
    "command": "qusing",
    "package": "physics",
    "snippet": "qusing"
  },
  "qusing*": {
    "command": "qusing*",
    "package": "physics",
    "snippet": "qusing*"
  },
  "rank": {
    "command": "rank",
    "package": "physics",
    "snippet": "rank"
  },
  "real": {
    "command": "real",
    "package": "physics",
    "snippet": "real"
  },
  "sPmqty{}": {
    "command": "sPmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "sPmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "sbmqty{}": {
    "command": "sbmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "sbmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "sec(expression)": {
    "command": "sec(expression)",
    "package": "physics",
    "snippet": "sec(expression)"
  },
  "sec[](expression)": {
    "command": "sec[power](expression)",
    "package": "physics",
    "snippet": "sec[${1:power}](expression)"
  },
  "secant": {
    "command": "secant",
    "package": "physics",
    "snippet": "secant"
  },
  "sech(expression)": {
    "command": "sech(expression)",
    "package": "physics",
    "snippet": "sech(expression)"
  },
  "sech[](expression)": {
    "command": "sech[power](expression)",
    "package": "physics",
    "snippet": "sech[${1:power}](expression)"
  },
  "sin(expression)": {
    "command": "sin(expression)",
    "package": "physics",
    "snippet": "sin(expression)"
  },
  "sin[](expression)": {
    "command": "sin[power](expression)",
    "package": "physics",
    "snippet": "sin[${1:power}](expression)"
  },
  "sine": {
    "command": "sine",
    "package": "physics",
    "snippet": "sine"
  },
  "sinh(expression)": {
    "command": "sinh(expression)",
    "package": "physics",
    "snippet": "sinh(expression)"
  },
  "sinh[](expression)": {
    "command": "sinh[power](expression)",
    "package": "physics",
    "snippet": "sinh[${1:power}](expression)"
  },
  "smallmatrixquantity{}": {
    "command": "smallmatrixquantity{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "smallmatrixquantity{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "smdet{}": {
    "command": "smdet{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}",
    "package": "physics",
    "snippet": "smdet{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element}}"
  },
  "smqty({})": {
    "command": "smqty({matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4})",
    "package": "physics",
    "snippet": "smqty({${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}})"
  },
  "smqty*({})": {
    "command": "smqty*({matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4})",
    "package": "physics",
    "snippet": "smqty*({${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}})"
  },
  "smqty[{]": {
    "command": "smqty[{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}]",
    "package": "physics",
    "snippet": "smqty[{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}]"
  },
  "smqty{}": {
    "command": "smqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "smqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "smqty|{}|": {
    "command": "smqty|{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}|",
    "package": "physics",
    "snippet": "smqty|{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}|"
  },
  "spmqty{}": {
    "command": "spmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "spmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "svmqty{}": {
    "command": "svmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "svmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "tan(expression)": {
    "command": "tan(expression)",
    "package": "physics",
    "snippet": "tan(expression)"
  },
  "tan[](expression)": {
    "command": "tan[power](expression)",
    "package": "physics",
    "snippet": "tan[${1:power}](expression)"
  },
  "tangent": {
    "command": "tangent",
    "package": "physics",
    "snippet": "tangent"
  },
  "tanh(expression)": {
    "command": "tanh(expression)",
    "package": "physics",
    "snippet": "tanh(expression)"
  },
  "tanh[](expression)": {
    "command": "tanh[power](expression)",
    "package": "physics",
    "snippet": "tanh[${1:power}](expression)"
  },
  "tr": {
    "command": "tr",
    "package": "physics",
    "snippet": "tr"
  },
  "tr(expression)": {
    "command": "tr(expression)",
    "package": "physics",
    "snippet": "tr(expression)"
  },
  "trace": {
    "command": "trace",
    "package": "physics",
    "snippet": "trace"
  },
  "va*{}": {
    "command": "va*{expression}",
    "package": "physics",
    "snippet": "va*{${1:expression}}"
  },
  "var(expression)": {
    "command": "var(expression)",
    "package": "physics",
    "snippet": "var(expression)"
  },
  "variation{}": {
    "command": "variation{expression}",
    "package": "physics",
    "snippet": "variation{${1:expression}}"
  },
  "var{}": {
    "command": "var{expression}",
    "package": "physics",
    "snippet": "var{${1:expression}}"
  },
  "va{}": {
    "command": "va{expression}",
    "package": "physics",
    "snippet": "va{${1:expression}}"
  },
  "vb*{}": {
    "command": "vb*{expression}",
    "package": "physics",
    "snippet": "vb*{${1:expression}}"
  },
  "vb{}": {
    "command": "vb{expression}",
    "package": "physics",
    "snippet": "vb{${1:expression}}"
  },
  "vdot": {
    "command": "vdot",
    "package": "physics",
    "snippet": "vdot"
  },
  "vectorarrow{}": {
    "command": "vectorarrow{expression}",
    "package": "physics",
    "snippet": "vectorarrow{${1:expression}}"
  },
  "vectorbold{}": {
    "command": "vectorbold{expression}",
    "package": "physics",
    "snippet": "vectorbold{${1:expression}}"
  },
  "vectorunit{}": {
    "command": "vectorunit{expression}",
    "package": "physics",
    "snippet": "vectorunit{${1:expression}}"
  },
  "vmqty{}": {
    "command": "vmqty{matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}",
    "package": "physics",
    "snippet": "vmqty{${1:matrix element 1 & matrix element 2  \\\\ matrix element 3 & matrix element 4}}"
  },
  "vqty{}": {
    "command": "vqty{expression}",
    "package": "physics",
    "snippet": "vqty{${1:expression}}"
  },
  "vu*{}": {
    "command": "vu*{expression}",
    "package": "physics",
    "snippet": "vu*{${1:expression}}"
  },
  "vu{}": {
    "command": "vu{expression}",
    "package": "physics",
    "snippet": "vu{${1:expression}}"
  },
  "diagonalmatrix{}": {
    "command": "diagonalmatrix{matrix element 1,matrix element 2,...}",
    "package": "physics",
    "snippet": "diagonalmatrix{${1:matrix element 1,matrix element 2,...}}"
  },
  "dmat{}": {
    "command": "dmat{matrix element 1,matrix element 2,...}",
    "package": "physics",
    "snippet": "dmat{${1:matrix element 1,matrix element 2,...}}"
  },
  "antidiagonalmatrix{}": {
    "command": "antidiagonalmatrix{matrix element 1,matrix element 2,...}",
    "package": "physics",
    "snippet": "antidiagonalmatrix{${1:matrix element 1,matrix element 2,...}}"
  },
  "admat{}": {
    "command": "admat{matrix element 1,matrix element 2,...}",
    "package": "physics",
    "snippet": "admat{${1:matrix element 1,matrix element 2,...}}"
  },
  "identitymatrix{}": {
    "command": "identitymatrix{n}",
    "package": "physics",
    "snippet": "identitymatrix{${1:n}}"
  },
  "imat{}": {
    "command": "imat{n}",
    "package": "physics",
    "snippet": "imat{${1:n}}"
  },
  "paulimatrix{}": {
    "command": "paulimatrix{n}",
    "package": "physics",
    "snippet": "paulimatrix{${1:n}}"
  },
  "pmat{}": {
    "command": "pmat{n}",
    "package": "physics",
    "snippet": "pmat{${1:n}}"
  },
  "xmatrix{}{}{}": {
    "command": "xmatrix{matrix element}{n}{m}",
    "package": "physics",
    "snippet": "xmatrix{${1:matrix element}}{${2:n}}{${3:m}}"
  },
  "xmat{}{}{}": {
    "command": "xmat{matrix element}{n}{m}",
    "package": "physics",
    "snippet": "xmat{${1:matrix element}}{${2:n}}{${3:m}}"
  },
  "zeromatrix{}{}": {
    "command": "zeromatrix{n}{m}",
    "package": "physics",
    "snippet": "zeromatrix{${1:n}}{${2:m}}"
  },
  "zmat{}{}": {
    "command": "zmat{n}{m}",
    "package": "physics",
    "snippet": "zmat{${1:n}}{${2:m}}"
  }
}
